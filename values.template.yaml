host:
    tz: # REQUIRED; e.g. 'Europe/Berlin'
    uid: # REQUIRED; obtain via `id -u`
    gid: # REQUIRED; obtain via `id -g`
certmanager:
    namespace: cert-manager
    tlsSecretName: certs.letsencrypt.key.tls
    acme:
        email: # REQUIRED; e.g. 'example@gmail.com'
        dns01:
            cfApiToken: # REQUIRED
authentik:
    namespace: authentik
    postgresql:
        auth:
            password: "" # REQUIRED; set the same value as in authentik-values.yaml
        backup: /opt/authentik/postgresql/backup
        # backups schedule in the cron format
        backupScheduleCron: "0 5 * * 0"
        # backups will be kept for the specified number of days
        backupRetentionDays: 180
ingress:
    domain: # REQUIRED; e.g. 'example.com' (without a scheme)
    # the service to serve when opening the root domain
    # set to service.name; leave empty to disable
    rootService: homepage
    annotations: {}
vpn:
    secretRef: wireguard-conf-secret # the secret's name
    secretKey: wg0.conf # key inside the secret containing a wg conf
services:
    backrest:
        enabled: true
        exposed: true
        name: backrest
        replicaCount: 1
        image:
            repository: garethgeorge/backrest
            tag: latest
            pullPolicy: IfNotPresent
        ports:
            http: 9898
        ingress:
            - backrest
            - backup
        vpn:
            enabled: false
        userdata: /opt
        data: /opt/backrest/data
        config: /opt/backrest/config
        cache: /opt/backrest/cache
        env: {}
    homepage:
        enabled: true
        exposed: true
        name: homepage
        replicaCount: 1
        image:
            repository: ghcr.io/gethomepage/homepage
            tag: latest
            pullPolicy: Always
        ports:
            http: 3000
        ingress:
            - homepage
        vpn:
            enabled: false
        widgets:
            # the value below are not mandatory get Homepage working, but it won't show useful info about the services
            authentik:
                apiKey: "" # go to Admin Portal > Directory > Tokens & App passwords and generate a new API key
            miniflux:
                apiKey: "" # go to Settings -> API Keys and generate a new API key
            radarr:
                apiKey: "" # go to Settings -> General and retrieve the API key
            sonarr:
                apiKey: "" # go to Settings -> General and retrieve the API key
            lidarr:
                apiKey: "" # go to Settings -> General and retrieve the API key
            bazarr:
                apiKey: "" # go to Settings -> General and retrieve the API key
            prowlarr:
                apiKey: "" # go to Settings -> General and retrieve the API key
            autobrr:
                apiKey: "" # go to Settings -> API Keys and generate a new API key
            jellyseerr:
                apiKey: "" # go to Settings -> General and retrieve the API key
            tautulli:
                apiKey: "" # go to Settings -> Web Interface and retrieve the API key
            jellyfin:
                apiKey: "" # go to Settings -> API Keys and generate a new API key
            sabnzbd:
                apiKey: "" # go to Settings -> General and retrieve the API key
            changedetection:
                apiKey: "" # go to Settings -> API and retrieve the API key
            gotify:
                apiKey: "" # go to Clients and generate a new client
            kavita:
                username: ""
                password: ""
            calibre:
                username: ""
                password: ""
        env: {}
    plex:
        enabled: false
        exposed: true
        name: plex
        replicaCount: 1
        image:
            repository: lscr.io/linuxserver/plex
            tag: "1.41.4"
            pullPolicy: IfNotPresent
        ports:
            http: 32400
            # make sure to open the remote access port in your firewall
            # you can change this port but it should be in range of 30000-32767 (k8s NodePort)
            remoteAccess: 32400
        ingress:
            - plex
        vpn:
            enabled: false
        # get a claim code at https://www.plex.tv/claim/
        # note the code is only active for 5 minutes
        claim: # REQUIRED
        config: /opt/plex/config
        # the container should have access only to the media library directory
        library: /data/library
        env: {}
    jellyfin:
        enabled: false
        exposed: true
        name: jellyfin
        replicaCount: 1
        image:
            repository: lscr.io/linuxserver/jellyfin
            tag: latest
            pullPolicy: Always
        ports:
            http: 8096
            udp: 7359
        ingress:
            - jellyfin
        vpn:
            enabled: false
        config: /opt/jellyfin/config
        # the container should have access only to the media library directory
        library: /data/library
        env: {}
    autobrr:
        enabled: false
        exposed: true
        name: autobrr
        replicaCount: 1
        image:
            repository: ghcr.io/autobrr/autobrr
            tag: latest
            pullPolicy: Always
        ports:
            http: 7474
        ingress:
            - autobrr
        vpn:
            enabled: false
        config: /opt/autobrr/config
        env:
            # see the full list of supported env vars
            # https://autobrr.com/installation/docker#environment-variables
            #
    qbittorrent:
        enabled: false
        exposed: true
        name: torrent
        replicaCount: 1
        image:
            repository: lscr.io/linuxserver/qbittorrent
            tag: latest
            pullPolicy: Always
        ports:
            http: 8080
            # make sure the p2p port is allowed in your firewall
            # you can change this port but it should be in range of 30000-32767 (k8s NodePort)
            p2p: 32700
        ingress:
            - qbittorrent
            - torrent
        vpn:
            enabled: false
        dockerMods: ghcr.io/vuetorrent/vuetorrent-lsio-mod:latest
        config: /opt/qbittorrent/config
        # the container should have access only to the torrent downloads directory
        data: /data/torrents
        env: {}
    sabnzbd:
        enabled: false
        exposed: true
        name: usenet
        replicaCount: 1
        image:
            repository: lscr.io/linuxserver/sabnzbd
            tag: latest
            pullPolicy: Always
        ports:
            http: 8080
        ingress:
            - sabnzbd
            - usenet
        vpn:
            enabled: false
        config: /opt/sabnzbd/config
        # the container should have access only to the usenet downloads directory
        data: /data/usenet
        env: {}
    prowlarr:
        enabled: false
        exposed: true
        name: prowlarr
        replicaCount: 1
        image:
            repository: lscr.io/linuxserver/prowlarr
            tag: latest
            pullPolicy: Always
        ports:
            http: 9696
        ingress:
            - prowlarr
        vpn:
            enabled: false
        config: /opt/prowlarr/config
        env: {}
    radarr:
        enabled: false
        exposed: true
        name: radarr
        replicaCount: 1
        image:
            repository: lscr.io/linuxserver/radarr
            tag: latest
            pullPolicy: Always
        ports:
            http: 7878
        ingress:
            - radarr
        vpn:
            enabled: false
        config: /opt/radarr/config
        # the container must have access to the whole data directory
        # otherwise hardlinks won't be working
        data: /data
        env: {}
    sonarr:
        enabled: false
        exposed: true
        name: sonarr
        replicaCount: 1
        image:
            repository: lscr.io/linuxserver/sonarr
            tag: latest
            pullPolicy: Always
        ports:
            http: 8989
        ingress:
            - sonarr
        vpn:
            enabled: false
        config: /opt/sonarr/config
        # the container must have access to the whole data directory
        # otherwise hardlinks won't be working
        data: /data
        env: {}
    lidarr:
        enabled: true
        exposed: true
        name: lidarr
        replicaCount: 1
        image:
            repository: lscr.io/linuxserver/lidarr
            tag: latest
            pullPolicy: Always
        ports:
            http: 8686
        ingress:
            - lidarr
        vpn:
            enabled: false
        config: /opt/lidarr/config
        # the container must have access to the whole data directory
        # otherwise hardlinks won't be working
        data: /data
        env: {}
    whisparr:
        enabled: false
        exposed: true
        name: whisparr
        replicaCount: 1
        image:
            repository: ghcr.io/hotio/whisparr
            tag: latest
            pullPolicy: Always
        ports:
            http: 6969
        ingress:
            - whisparr
        vpn:
            enabled: false
        config: /opt/whisparr/config
        # the container must have access to the whole data directory
        # otherwise hardlinks won't be working
        data: /data
        env: {}
    bazarr:
        enabled: false
        exposed: true
        name: bazarr
        replicaCount: 1
        image:
            repository: lscr.io/linuxserver/bazarr
            tag: latest
            pullPolicy: Always
        ports:
            http: 6767
        ingress:
            - bazarr
        vpn:
            enabled: false
        config: /opt/bazarr/config
        # the container must have access to the whole data directory
        # otherwise hardlinks won't be working
        data: /data
        env: {}
    jellyseerr:
        enabled: false
        exposed: true
        name: jellyseerr
        replicaCount: 1
        image:
            repository: fallenbagel/jellyseerr
            tag: latest
            pullPolicy: Always
        ports:
            http: 5055
        ingress:
            - jellyseerr
        vpn:
            enabled: false
        config: /opt/jellyseerr/config
        env: {}
    flaresolverr:
        enabled: false
        exposed: false
        name: flaresolverr
        replicaCount: 1
        image:
            # up to date fork of FlareSolverr
            # uses nodriver method instead of obsolete undetected-chromedriver
            repository: 21hsmw/flaresolverr
            tag: nodriver
            pullPolicy: Always
        ports:
            http: 8191
        ingress:
        vpn:
            enabled: false
        # nodriver is a preferred method
        # it's the official successor of undetected-chromedriver
        # do not change this value unless you know what you are doing
        driver: nodriver
        logLevel: INFO
        lang: en_US
        env:
            # see the full list of supported env vars
            # https://github.com/21hsmw/FlareSolverr?tab=readme-ov-file#environment-variables
            #
    tautulli:
        enabled: false
        exposed: true
        name: tautulli
        replicaCount: 1
        image:
            repository: lscr.io/linuxserver/tautulli
            tag: latest
            pullPolicy: Always
        ports:
            http: 8181
        ingress:
            - tautulli
        vpn:
            enabled: false
        config: /opt/tautulli/config
        env: {}
    kometa:
        enabled: false
        exposed: false
        name: kometa
        replicaCount: 1
        image:
            repository: kometateam/kometa
            tag: latest
            pullPolicy: Always
        ports:
            http: 8181
        ingress:
        vpn:
            enabled: false
        config: /opt/kometa/config
        # when to run the Kometa job
        # runs at 5AM by default
        # use https://crontab.guru for building and checking your cron value
        scheduleCron: "0 5 * * *"
        # whether to enable jmxd overlays
        # see https://github.com/jmxd/Kometa for details
        # personally, I find them minimalistic and best-looking
        enableJmxdOverlays: False
        # the .connections entries below are not mandatory if you don't plan using my default profile
        # although these vars are very common so high chance you will need them in your own configuration too
        connections:
            tmdb:
                apiKey: ""
                language: en
                region: US
            imdb:
                userId: ""
            letterboxd:
                username: ""
            plex:
                apiKey: ""
            radarr:
                apiKey: "" # go to Settings -> General and retrieve the API key
                qualityProfile: "" # set the quality profile name which you configured in Radarr
                rootFolderPath: "" # set the root folder path; e.g. /data/library/movies
            sonarr:
                apiKey: "" # go to Settings -> General and retrieve the API key
                qualityProfile: "" # set the quality profile name which you configured in Sonarr
                rootFolderPath: "" # set the root folder path; e.g. /data/library/tv
        env:
            # see the full list of supported env vars
            # https://kometa.wiki/en/latest/kometa/environmental
            #
    thelounge:
        enabled: false
        exposed: true
        name: thelounge
        replicaCount: 1
        image:
            repository: lscr.io/linuxserver/thelounge
            tag: latest
            pullPolicy: Always
        ports:
            http: 9000
        ingress:
            - thelounge
            - lounge
            - irc
        vpn:
            enabled: false
        config: /opt/thelounge/config
        env: {}
    myspeed:
        enabled: true
        exposed: true
        name: myspeed
        replicaCount: 1
        image:
            repository: germannewsmaker/myspeed
            tag: latest
            pullPolicy: Always
        ports:
            http: 5216
        ingress:
            - myspeed
            - speedtest
        vpn:
            enabled: false
        config: /opt/myspeed/config
        env: {}
    stirlingpdf:
        enabled: false
        exposed: true
        name: pdf
        replicaCount: 1
        image:
            repository: frooodle/s-pdf
            tag: latest
            pullPolicy: Always
        ports:
            http: 8080
        ingress:
            - stirlingpdf
            - stirling-pdf
            - pdf
        vpn:
            enabled: false
        enableLogin: false
        installBookAndAdvancedHtmlOps: true
        langs: "en_GB,en_US"
        config: /opt/stirlingpdf/config
        logs: /opt/stirlingpdf/logs
        env:
            # see the full list of supported env vars
            # https://github.com/Stirling-Tools/Stirling-PDF?tab=readme-ov-file#customisation
            #
            # UI_APP_NAME: "My very own Stirling PDF"
    miniflux:
        enabled: false
        exposed: true
        name: rss
        replicaCount: 1
        image:
            repository: ghcr.io/miniflux/miniflux
            tag: latest
            pullPolicy: Always
        ports:
            http: 8080
        ingress:
            - miniflux
            - rss
        vpn:
            enabled: false
        db:
            name: miniflux-db
            user: miniflux
            # generate a password for the postgres user
            # e.g. `pwgen -s -B -n 14 1`
            password: # REQUIRED
            dbname: miniflux
            ports:
                postgres: 5432
            data: /opt/miniflux/postgresql/17/data
            backup: /opt/miniflux/postgresql/17/backup
            # backups schedule cron
            backupScheduleCron: "0 5 * * 0"
            # backups will be kept for the specified number of days
            backupRetentionDays: 180
        # number of days after which marking read items as removed; set to -1 to disable this feature
        cleanupArchiveReadDays: 180
        # number of days after which marking unread items as removed; set to -1 to disable this feature
        cleanupArchiveUnreadDays: 360
        # cleanup job frequency
        cleanupFrequencyHours: 24
        env: {}
    huginn:
        enabled: false
        exposed: true
        name: huginn
        replicaCount: 1
        image:
            repository: ghcr.io/huginn/huginn
            tag: latest
            pullPolicy: Always
        ports:
            http: 3000
        ingress:
            - huginn
        vpn:
            enabled: false
        db:
            name: huginn-db
            user: huginn
            # generate a password for the postgres user
            # e.g. `pwgen -s -B -n 14 1`
            password: # REQUIRED
            dbname: huginn
            ports:
                postgres: 5432
            data: /opt/huginn/postgresql/17/data
            backup: /opt/huginn/postgresql/17/backup
            # backups schedule cron
            backupScheduleCron: "0 5 * * 0"
            # backups will be kept for the specified number of days
            backupRetentionDays: 180
        # generate a secret token
        # e.g. `openssl rand -base64 32`
        appSecretToken: # REQUIRED
        # leave empty if you don't want to require the inv code for registration
        # usually not needed as this service is already protected by Authentik
        invitationCode: ""
        env:
            # see the full list of supported env vars
            # https://github.com/huginn/huginn/blob/master/.env.example
            #
    playwright:
        enabled: false
        exposed: false
        name: playwright
        replicaCount: 1
        image:
            repository: ghcr.io/browserless/chromium
            tag: latest
            pullPolicy: Always
        ports:
            http: 3000
        ingress:
        vpn:
            enabled: false
        # generate a secret token
        # e.g. `openssl rand -base64 32`
        token: # REQUIRED
        timeout: 60000
        maxConcurrentSessions: 10
        maxQueueLength: 10
        config: /opt/playwright/config
        env:
            # see the full list of supported env vars
            # https://docs.browserless.io/docker/config
            #
    changedetectionio:
        enabled: false
        exposed: true
        name: changedetection
        replicaCount: 1
        image:
            repository: lscr.io/linuxserver/changedetection.io
            tag: latest
            pullPolicy: Always
        ports:
            http: 5000
        ingress:
            - changedetectionio
            - changedetection
        vpn:
            enabled: false
        playwrightLaunchOptions:
            # see the full list of available launch options
            # https://docs.browserless.io/chrome-flags
            stealth: true
            headless: true
            args: ["--lang=en-US", "--hide-scrollbars"]
        config: /opt/changedetectionio/config
        env:
            # see the full list of supported env vars
            # https://github.com/dgtlmoon/changedetection.io/blob/master/docker-compose.yml#L12
            #
    archivebox:
        enabled: false
        exposed: true
        name: archivebox
        replicaCount: 1
        image:
            repository: archivebox/archivebox
            tag: latest
            pullPolicy: Always
        ports:
            http: 8000
        ingress:
            - archivebox
            - archive
        vpn:
            enabled: false
        adminUsername: admin
        adminPassword: admin
        mediaMaxSize: 750m
        timeout: 120
        saveTitle: true
        saveFavicon: true
        saveWget: true
        saveWarc: true
        savePdf: true
        saveScreenshot: true
        saveDom: true
        saveSinglefile: true
        saveReadability: true
        saveMercury: true
        saveGit: true
        saveMedia: true
        saveArchiveDotOrg: true
        userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
        data: /opt/archivebox/data
        env:
            # see the full list of supported env vars
            # https://github.com/ArchiveBox/ArchiveBox/wiki/Configuration
            #
    apprise:
        enabled: false
        exposed: true
        name: apprise
        replicaCount: 1
        image:
            repository: lscr.io/linuxserver/apprise-api
            tag: latest
            pullPolicy: Always
        ports:
            http: 8000
        ingress:
            - apprise
        vpn:
            enabled: false
        logLevel: INFO
        statefulMode: simple
        # attach size is limited to 500 Mb at max
        attachSizeMegabytes: 500
        defaultConfigId: apprise
        defaultTheme: dark
        config: /opt/apprise/config
        env:
            # see the full list of supported env vars
            # https://github.com/caronc/apprise-api?tab=readme-ov-file#environment-variables
            #
    gotify:
        enabled: false
        exposed: true
        name: gotify
        replicaCount: 1
        image:
            repository: ghcr.io/gotify/server
            tag: latest
            pullPolicy: Always
        ports:
            http: 80
        ingress:
            - gotify
        vpn:
            enabled: false
        adminUsername: admin
        adminPassword: admin
        databaseDialect: sqlite3
        databaseConnection: data/gotify.db
        data: /opt/gotify/data
        env:
            # see the full list of supported env vars
            # https://gotify.net/docs/config#environment-variables
            #
    kavita:
        enabled: false
        exposed: true
        name: kavita
        replicaCount: 1
        image:
            repository: lscr.io/linuxserver/kavita
            tag: latest
            pullPolicy: Always
        ports:
            http: 5000
        ingress:
            - kavita
        vpn:
            enabled: false
        config: /opt/kavita/config
        library: /data/library/books
        env: {}
    calibre:
        enabled: false
        exposed: true
        name: calibre
        replicaCount: 1
        image:
            repository: crocodilestick/calibre-web-automated
            tag: latest
            pullPolicy: Always
        ports:
            http: 8083
        ingress:
            - calibre
            - books
        vpn:
            enabled: false
        config: /opt/calibre-web-automated/config
        ingest: /opt/calibre-web-automated/ingest
        data: /data/library/books
        env: {}
    calibrebookdownloader:
        enabled: false
        exposed: true
        name: calibrebookdownloader
        replicaCount: 1
        image:
            repository: ghcr.io/calibrain/calibre-web-automated-book-downloader
            tag: latest
            pullPolicy: Always
        ports:
            http: 8084
        ingress:
            - calibre-book-downloader
            - annas-archive
            - anna-archive
        # Anna's Archive is blocked in some countries, you can use a VPN to bypass the block
        vpn:
            enabled: false
        # bypasses Cloudflare's protection when downloading books from Anna's Archive
        useCfBypass: true
        # preferred books language, you can add more languages separated by a comma
        bookLanguage: "en,ru"
        # restricts the search to specific formats
        # you can add more formats separated by a comma
        # pay attention to compatibility with CWA - some formats may not be ingested
        # the default value is synced with the current version of CWA (3.0.1)
        # note: formats are sorted in the order of preference
        supportedFormats: "epub,azw,azw3,azw4,mobi,fb2,cbz,cbr,cb7,cbc,chm,pdf,djvu,docx,fbz,html,htmlz,lit,lrf,odt,prc,pdb,pml,rb,rtf,snb,tcr,txtz"
        env: {}
    openbooks:
        enabled: false
        exposed: true
        name: openbooks
        replicaCount: 1
        image:
            repository: evanbuss/openbooks
            tag: latest
            pullPolicy: Always
        ports:
            http: 8080
        ingress:
            - openbooks
            - irchighway
            - highway
        vpn:
            enabled: false
        # your IRC name, it will be used to identify you in the IRC channel
        ircname: # REQUIRED
        # if true, won't send files to browser
        noBrowserDownloads: false
        env: {}
    convertx:
        enabled: false
        exposed: true
        name: convertx
        replicaCount: 1
        image:
            repository: ghcr.io/c4illin/convertx
            tag: latest
            pullPolicy: Always
        ports:
            http: 3000
        ingress:
            - convertx
            - convert
        vpn:
            enabled: false
        data: /opt/convertx/data
        autoDeleteEveryNHours: 24
        env: {}
    pinchflat:
        enabled: false
        exposed: true
        name: pinchflat
        replicaCount: 1
        image:
            repository: ghcr.io/kieraneglin/pinchflat
            tag: latest
            pullPolicy: Always
        ports:
            http: 8945
        ingress:
            - pinchflat
        vpn:
            enabled: false
        config: /opt/pinchflat/config
        data: /data/library/videos
        env: {}
    mealie:
        enabled: false
        exposed: true
        name: mealie
        replicaCount: 1
        image:
            repository: ghcr.io/mealie-recipes/mealie
            tag: latest
            pullPolicy: Always
        ports:
            http: 9000
        ingress:
            - mealie
            - recipes
            - recipe
        vpn:
            enabled: false
        tokenTimeHours: 168
        data: /opt/mealie/data
        env: {}
