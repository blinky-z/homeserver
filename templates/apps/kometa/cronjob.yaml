{{- if .Values.services.kometa.enabled }}
{{- $service := .Values.services.kometa  }}
{{- $kind := "app" }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "common.names.name" ( dict "service" $service "kind" $kind ) | quote }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "service" $service "kind" $kind "context" $ ) | nindent 4 }}
spec:
  schedule: {{ $service.scheduleCron }}
  timeZone: {{ required "A valid timezone required!" .Values.host.tz }}
  successfulJobsHistoryLimit: 3
  concurrencyPolicy: Replace
  jobTemplate:
    metadata:
      labels: {{- include "common.labels.standard" ( dict "service" $service "kind" $kind "context" $ ) | nindent 8 }}
    spec:
      template:
        metadata:
          labels: {{- include "common.labels.standard" ( dict "service" $service "kind" $kind "context" $ ) | nindent 12 }}
          annotations:
            checksum/config: {{ include "common.utils.checksumTemplate" ( dict "path" "/apps/kometa/configmap.yaml" "context" $ ) }}
        spec:
          restartPolicy: OnFailure
          automountServiceAccountToken: {{ .Values.automountServiceAccountToken }}
          enableServiceLinks: {{ .Values.enableServiceLinks }}
          priorityClassName: {{ include "common.pod.priorityClass" (dict "service" $service "kind" $kind "context" $) | quote }}
          securityContext: {{- include "common.pod.securityContext" (dict "service" $service "kind" $kind "context" $) | nindent 12 }}
          initContainers: {{- include "common.pod.initContainers" (dict "service" $service "kind" $kind "context" $) | nindent 12 }}
            {{- include "common.initContainer.volumePermissions" ( dict "volumes" (list "config") "context" $ ) | nindent 12 }}
            - name: add-kometa-config
              image: {{ include "common.initContainer.utility-image" . | quote }}
              imagePullPolicy: IfNotPresent
              securityContext: {{- include "common.container.securityContext" (dict "service" $service "kind" $kind "context" $) | nindent 16 }}
              command:
                - /bin/sh
                - -ec
                - |-
                  cp -rfL /tmp/config/* /config/
              resources: {{- include "common.resources.preset" (dict "type" "nano") | nindent 16 }}
              volumeMounts:
                - name: config
                  mountPath: /config
                - name: kometa-config
                  mountPath: /tmp/config
            {{- if $service.enableJmxdOverlays }}
            - name: init-jmxd-overlays
              image: alpine/git
              imagePullPolicy: IfNotPresent
              securityContext: {{- include "common.container.securityContext" (dict "service" $service "kind" $kind "context" $) | nindent 16 }}
              command:
                - /bin/sh
                - -ec
                - |-
                  rm -rf /config/overlays/jmxd \
                    && git clone --depth=1 https://github.com/jmxd/Kometa.git /config/overlays/jmxd \
                    && cp -rfL /config/overlays/jmxd/overlays/* /config/overlays/ \
                    && rm -rf /config/overlays/jmxd \
                    && echo "Kometa jmxd overlays enabled. See https://github.com/jmxd/Kometa.git for details"
              resources: {{- include "common.resources.preset" (dict "type" "nano") | nindent 16 }}
              volumeMounts:
                - name: config
                  mountPath: /config
            {{- end }}
          containers:
            - name: kometa
              image: {{ printf "%s:%s" $service.image.repository $service.image.tag | quote }}
              imagePullPolicy: {{ $service.image.pullPolicy }}
              securityContext: {{- include "common.container.securityContext" (dict "service" $service "kind" $kind "context" $) | nindent 16 }}
              args: [ "--run", "--read-only-config", "--config", "config/config.yaml" ]
              envFrom: {{- include "common.container.envFrom" (dict "service" $service "kind" $kind "context" $) | nindent 16 }}
              env: {{- include "common.container.env" (dict "service" $service "kind" $kind "context" $) | nindent 16 }}
              resources: {{- include "common.container.resources" (dict "service" $service "kind" $kind "context" $) | nindent 16 }}
              volumeMounts: {{- include "common.container.volumeMounts" (dict "service" $service "kind" $kind "context" $) | nindent 16 }}
                - name: config
                  mountPath: /config
          volumes: {{- include "common.pod.volumes" (dict "service" $service "kind" $kind "context" $) | nindent 12 }}
            - name: kometa-config
              configMap:
                name: {{ include "common.names.name" ( dict "service" $service "kind" $kind ) | quote }}
            - name: config
              hostPath:
                path: {{ $service.persistence.config | quote }}
                type: Directory
{{- end }}
