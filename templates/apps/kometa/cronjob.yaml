{{- if .Values.services.kometa.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Values.services.kometa.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.services.kometa.name }}
spec:
  schedule: {{ .Values.services.kometa.scheduleCron }}
  timeZone: {{ required "A valid timezone required!" .Values.host.tz }}
  successfulJobsHistoryLimit: 3
  concurrencyPolicy: Replace
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.services.kometa.name }}
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: {{ .Values.services.kometa.name }}
          annotations:
            checksum/config: {{ include (print $.Template.BasePath "/apps/kometa/configmap.yaml") . | sha256sum }}
        spec:
          securityContext:
            fsGroup: {{ required "A valid GID required!" .Values.host.gid }}
          initContainers:
          {{- if .Values.services.kometa.vpn.enabled }}
            - name: gluetun
              image: ghcr.io/qdm12/gluetun:v3.40
              imagePullPolicy: IfNotPresent
              restartPolicy: Always
              securityContext:
                capabilities:
                  add: ["NET_ADMIN"]
              envFrom:
                - secretRef:
                    name: gluetun-conf-secret
                    optional: false
              env:
                - name: TZ
                  value: {{ required "A valid timezone required!" .Values.host.tz | quote }}
                - name: HTTP_CONTROL_SERVER_ADDRESS
                  value: ":9998"
                - name: DNS_KEEP_NAMESERVER
                  value: "on"
                - name: FIREWALL_OUTBOUND_SUBNETS
                  value: "10.42.0.0/15"
                - name: HEALTH_SERVER_ADDRESS
                  value: ":9999"
                - name: HEALTH_VPN_DURATION_INITIAL
                  value: {{ .Values.vpn.health.durationInitial | quote }}
                - name: HEALTH_VPN_DURATION_ADDITION
                  value: {{ .Values.vpn.health.durationAddition | quote }}
                - name: HEALTH_SUCCESS_WAIT_DURATION
                  value: {{ .Values.vpn.health.successWaitDuration | quote }}
                - name: HEALTH_TARGET_ADDRESS
                  value: {{ .Values.vpn.health.targetAddress | quote }}
              volumeMounts:
                - name: dev-net-tun
                  mountPath: /dev/net/tun
              readinessProbe:
                httpGet:
                  path: /
                  port: 9999
                initialDelaySeconds: 10
                periodSeconds: 5
                timeoutSeconds: 1
                failureThreshold: 10
                successThreshold: 1
          {{- end }}
            - name: add-kometa-config
              image: busybox
              imagePullPolicy: IfNotPresent
              securityContext:
                runAsUser: {{ required "A valid UID required!" .Values.host.uid }}
                runAsGroup: {{ required "A valid GID required!" .Values.host.gid }}
                runAsNonRoot: true
              command:
                - /bin/sh
                - -c
                - cp -rfL /tmp/config/* /config/ && chmod -R a=,a+rX,u+w,g+w /config
              volumeMounts:
                - name: config
                  mountPath: /config
                - name: kometa-config
                  mountPath: /tmp/config
            {{- if .Values.services.kometa.enableJmxdOverlays }}
            - name: init-jmxd-overlays
              image: alpine/git
              imagePullPolicy: IfNotPresent
              securityContext:
                runAsUser: {{ required "A valid UID required!" .Values.host.uid }}
                runAsGroup: {{ required "A valid GID required!" .Values.host.gid }}
                runAsNonRoot: true
              command:
                - /bin/sh
                - -c
                - |-
                  rm -rf /config/overlays/jmxd \
                    && git clone --depth=1 https://github.com/jmxd/Kometa.git /config/overlays/jmxd \
                    && cp -rfL /config/overlays/jmxd/overlays/* /config/overlays/ \
                    && rm -rf /config/overlays/jmxd \
                    && echo "Kometa jmxd overlays enabled. See https://github.com/jmxd/Kometa.git for details"
              volumeMounts:
                - name: config
                  mountPath: /config
            {{- end }}
          containers:
            - name: kometa
              image: "{{ .Values.services.kometa.image.repository }}:{{ .Values.services.kometa.image.tag }}"
              imagePullPolicy: {{ .Values.services.kometa.image.pullPolicy }}
              args: [ "--run", "--read-only-config", "--config", "config/config.yaml" ]
              securityContext:
                runAsUser: {{ required "A valid UID required!" .Values.host.uid }}
                runAsGroup: {{ required "A valid GID required!" .Values.host.gid }}
                runAsNonRoot: true
              env:
                {{- range $key, $value := .Values.services.kometa.env }}
                - name: {{ $key | quote }}
                  value: {{ $value | quote }}
                {{- end }}
              resources:
                requests:
                  cpu: 100m
                  memory: 125Mi
                limits:
                  cpu: 1000m
                  memory: 1024Mi
              volumeMounts:
                - name: config
                  mountPath: /config
          volumes:
            {{- if .Values.services.kometa.vpn.enabled }}
            - name: dev-net-tun
              hostPath:
                path: /dev/net/tun
                type: CharDevice
            {{- end }}
            - name: config
              hostPath:
                path: {{ .Values.services.kometa.config | quote }}
                type: Directory
            - name: kometa-config
              configMap:
                name: {{ .Values.services.kometa.name }}
          restartPolicy: OnFailure
{{- end }}
