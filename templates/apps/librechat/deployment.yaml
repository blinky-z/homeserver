{{- if .Values.services.librechat.enabled }}
{{- $service := .Values.services.librechat  }}
{{- $kind := "app" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.names.name" ( dict "service" $service "kind" $kind ) | quote }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "service" $service "kind" $kind "context" $ ) | nindent 4 }}
spec:
  revisionHistoryLimit: 3
  replicas: {{ $service.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "service" $service "kind" $kind "context" $ ) | nindent 6 }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" ( dict "service" $service "kind" $kind "context" $ ) | nindent 8 }}
      annotations:
        checksum/config: {{ include "common.utils.checksumTemplate" ( dict "path" "/apps/librechat/configmap.yaml" "context" $ ) }}
    spec:
      automountServiceAccountToken: {{ include "common.pod.automountServiceAccountToken" (dict "service" $service "kind" $kind "context" $) }}
      enableServiceLinks: {{ include "common.pod.enableServiceLinks" (dict "service" $service "kind" $kind "context" $) }}
      priorityClassName: {{ include "common.pod.priorityClass" (dict "service" $service "kind" $kind "context" $) | quote }}
      securityContext: {{- include "common.pod.securityContext" (dict "service" $service "kind" $kind "context" $) | nindent 8 }}
      initContainers: {{- include "common.pod.initContainers" (dict "service" $service "kind" $kind "context" $) | nindent 8 }}
        {{- include "common.initContainer.volumePermissions" ( dict "volumes" (list "client-images") "context" $ ) | nindent 8 }}
      containers:
        - name: librechat
          image: {{ printf "%s:%s" $service.image.repository $service.image.tag | quote }}
          imagePullPolicy: {{ $service.image.pullPolicy }}
          securityContext: {{- include "common.container.securityContext" (dict "service" $service "kind" $kind "context" $) | nindent 12 }}
          envFrom: {{- include "common.container.envFrom" (dict "service" $service "kind" $kind "context" $) | nindent 12 }}
          env: {{- include "common.container.env" (dict "service" $service "kind" $kind "context" $) | nindent 12 }}
            - name: CONFIG_PATH
              value: /config/librechat.yaml
            - name: CUSTOM_FOOTER
              value: {{ $service.customFooter | quote }}
            - name: ENDPOINTS
              value: {{ $service.endpoints | quote }}
            - name: SEARCH
              value: "false"
            - name: CREDS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $service.secretName | quote }}
                  key: creds-key
                  optional: false
            - name: CREDS_IV
              valueFrom:
                secretKeyRef:
                  name: {{ $service.secretName | quote }}
                  key: creds-iv
                  optional: false
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ $service.secretName | quote }}
                  key: jwt-secret
                  optional: false
            - name: JWT_REFRESH_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ $service.secretName | quote }}
                  key: jwt-refresh-secret
                  optional: false
            - name: MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $service.db.secretName | quote }}
                  key: mongodb-librechat-username
                  optional: false
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $service.db.secretName | quote }}
                  key: mongodb-librechat-password
                  optional: false
            - name: MONGO_URI
              value: "mongodb://$(MONGODB_USERNAME):$(MONGODB_PASSWORD)@{{ include "common.names.name" ( dict "service" $service "kind" "database" ) }}:{{ $service.db.ports.mongo }}/{{ $service.db.dbName }}"
          ports:
            - name: http
              containerPort: 3080
              protocol: TCP
          resources: {{- include "common.container.resources" (dict "service" $service "kind" $kind "context" $) | nindent 12 }}
          volumeMounts: {{- include "common.container.volumeMounts" (dict "service" $service "kind" $kind "context" $) | nindent 12 }}
            - name: empty-dir
              mountPath: /app/data
              subPath: app-data-dir
            - name: empty-dir
              mountPath: /app/uploads
              subPath: app-uploads-dir
            - name: empty-dir
              mountPath: /app/api/logs
              subPath: app-api-logs-dir
            - name: client-images
              mountPath: /app/client/public/images
            - name: config
              mountPath: /config
      volumes: {{- include "common.pod.volumes" (dict "service" $service "kind" $kind "context" $) | nindent 8 }}
        - name: config
          configMap:
            name: {{ include "common.names.name" ( dict "service" $service "kind" $kind ) | quote }}
        - name: client-images
          hostPath:
            path: {{ $service.persistence.clientImages | quote }}
            type: Directory
{{- end }}
