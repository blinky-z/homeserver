{{- if .Values.services.huginn.enabled }}
{{- $service := .Values.services.huginn  }}
{{- $kind := "app" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "homeserver.common.names.name" ( dict "service" $service "kind" $kind ) | quote }}
  namespace: {{ include "homeserver.common.names.namespace" . | quote }}
  labels: {{- include "homeserver.common.labels.standard" ( dict "service" $service "kind" $kind "context" $ ) | nindent 4 }}
spec:
  revisionHistoryLimit: 3
  replicas: {{ $service.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels: {{- include "homeserver.common.labels.matchLabels" ( dict "service" $service "kind" $kind "context" $ ) | nindent 6 }}
  template:
    metadata:
      labels: {{- include "homeserver.common.labels.standard" ( dict "service" $service "kind" $kind "context" $ ) | nindent 8 }}
    spec:
      automountServiceAccountToken: {{ include "homeserver.common.pod.automountServiceAccountToken" (dict "service" $service "kind" $kind "context" $) }}
      enableServiceLinks: {{ include "homeserver.common.pod.enableServiceLinks" (dict "service" $service "kind" $kind "context" $) }}
      priorityClassName: {{ include "homeserver.common.pod.priorityClass" (dict "service" $service "kind" $kind "context" $) | quote }}
      # unfortunately the image needs root access
      # in order to write to the (root) /app directory
      securityContext: {{- include "homeserver.common.pod.securityContext" (dict "service" $service "kind" $kind "context" $) | nindent 8 }}
      initContainers: {{- include "homeserver.common.pod.initContainers" (dict "service" $service "kind" $kind "context" $) | nindent 8 }}
        {{- include "homeserver.common.initContainer.volumePermissions" ( dict "volumes" (list) "context" $ ) | nindent 8 }}
      containers:
        - name: huginn
          image: {{ printf "%s:%s" $service.image.repository $service.image.tag | quote }}
          imagePullPolicy: {{ $service.image.pullPolicy }}
          securityContext: {{- include "homeserver.common.container.securityContext" (dict "service" $service "kind" $kind "context" $) | nindent 12 }}
          envFrom: {{- include "homeserver.common.container.envFrom" (dict "service" $service "kind" $kind "context" $) | nindent 12 }}
          env: {{- include "homeserver.common.container.env" (dict "service" $service "kind" $kind "context" $) | nindent 12 }}
            - name: INVITATION_CODE
              value: {{ $service.invitationCode | quote }}
            - name: SKIP_INVITATION_CODE
            {{- if $service.invitationCode }}
              value: "false"
            {{- else }}
              value: "true"
            {{- end }}
            - name: REQUIRE_CONFIRMED_EMAIL
              value: "false"
            - name: APP_SECRET_TOKEN
              value: {{ required "A valid $service.appSecretToken required!" $service.appSecretToken | quote }}
            - name: DATABASE_ADAPTER
              value: postgresql
            - name: POSTGRES_PORT_5432_TCP_ADDR
              value: {{ $service.db.name | quote }}
            - name: POSTGRES_PORT_5432_TCP_PORT
              value: {{ $service.db.ports.postgres | quote }}
            - name: DATABASE_USERNAME
              value: {{ $service.db.user | quote }}
            - name: DATABASE_PASSWORD
              value: {{ required "A valid $service.db.password required!" $service.db.password | quote }}
            - name: DATABASE_NAME
              value: {{ $service.db.dbName | quote }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
      volumes: {{- include "homeserver.common.pod.volumes" (dict "service" $service "kind" $kind "context" $) | nindent 8 }}
{{- end }}
