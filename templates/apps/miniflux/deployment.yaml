{{- if .Values.services.miniflux.enabled }}
{{- $service := .Values.services.miniflux  }}
{{- $kind := "app" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.names.name" ( dict "service" $service "kind" $kind ) | quote }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "service" $service "kind" $kind "context" $ ) | nindent 4 }}
spec:
  revisionHistoryLimit: 3
  replicas: {{ $service.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "service" $service "kind" $kind "context" $ ) | nindent 6 }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" ( dict "service" $service "kind" $kind "context" $ ) | nindent 8 }}
    spec:
      automountServiceAccountToken: {{ include "common.pod.automountServiceAccountToken" (dict "service" $service "kind" $kind "context" $) }}
      enableServiceLinks: {{ include "common.pod.enableServiceLinks" (dict "service" $service "kind" $kind "context" $) }}
      priorityClassName: {{ include "common.pod.priorityClass" (dict "service" $service "kind" $kind "context" $) | quote }}
      securityContext: {{- include "common.pod.securityContext" (dict "service" $service "kind" $kind "context" $) | nindent 8 }}
      initContainers: {{- include "common.pod.initContainers" (dict "service" $service "kind" $kind "context" $) | nindent 8 }}
        {{- include "common.initContainer.volumePermissions" ( dict "volumes" (list) "context" $ ) | nindent 8 }}
      containers:
        - name: miniflux
          image: {{ printf "%s:%s" $service.image.repository $service.image.tag | quote }}
          imagePullPolicy: {{ $service.image.pullPolicy }}
          securityContext: {{- include "common.container.securityContext" (dict "service" $service "kind" $kind "context" $) | nindent 12 }}
          envFrom: {{- include "common.container.envFrom" (dict "service" $service "kind" $kind "context" $) | nindent 12 }}
          env: {{- include "common.container.env" (dict "service" $service "kind" $kind "context" $) | nindent 12 }}
            - name: DATABASE_URL
              value: postgres://{{ $service.db.user }}:{{ required "A valid $service.db.password required!" $service.db.password }}@{{ include "common.names.name" ( dict "service" $service "kind" "database" ) }}/{{ $service.db.dbName }}?sslmode=disable
            - name: RUN_MIGRATIONS
              value: "1"
            - name: CLEANUP_ARCHIVE_READ_DAYS
              value: {{ $service.cleanupArchiveReadDays | quote }}
            - name: CLEANUP_ARCHIVE_UNREAD_DAYS
              value: {{ $service.cleanupArchiveUnreadDays | quote }}
            - name: CLEANUP_FREQUENCY_HOURS
              value: {{ $service.cleanupFrequencyHours | quote }}
            - name: CREATE_ADMIN
              value: "0"
            - name: DISABLE_LOCAL_AUTH
              value: "false"
            - name: AUTH_PROXY_HEADER
              value: 'X-authentik-email'
            - name: AUTH_PROXY_USER_CREATION
              value: "1"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources: {{- include "common.container.resources" (dict "service" $service "kind" $kind "context" $) | nindent 12 }}
          volumeMounts: {{- include "common.container.volumeMounts" (dict "service" $service "kind" $kind "context" $) | nindent 12 }}
          livenessProbe:
            exec:
              command:
                - /usr/bin/miniflux
                - -healthcheck
                - auto
            initialDelaySeconds: 30
            periodSeconds: 30
      volumes: {{- include "common.pod.volumes" (dict "service" $service "kind" $kind "context" $) | nindent 8 }}
{{- end }}
