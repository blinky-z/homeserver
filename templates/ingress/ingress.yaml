apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
  namespace: {{ include "homeserver.common.names.namespace" . | quote }}
  labels: {{- include "homeserver.common.labels.standard" ( dict "context" $ ) | nindent 4 }}
    app.kubernetes.io/name: ingress
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-cert-issuer
    traefik.ingress.kubernetes.io/router.middlewares: "{{ include "homeserver.common.names.namespace" . }}-forwardauth-authentik@kubernetescrd,{{ include "homeserver.common.names.namespace" . }}-security-headers@kubernetescrd"
    {{- range $key, $value := .Values.ingress.annotations }}
      {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  ingressClassName: traefik
  tls:
    - secretName: {{ .Values.tls.tlsSecretName }}
      hosts:
        - "{{ required "A valid .Values.ingress.domain required!" .Values.ingress.domain }}"
        - "*.{{ required "A valid .Values.ingress.domain required!" .Values.ingress.domain }}"
  rules:
    {{- range $service := .Values.services }}
    {{- if and $service.enabled $service.exposed }}
    {{- range $host := $service.ingress }}
    - host: {{ printf "%s.%s" $host $.Values.ingress.domain | quote }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ include "homeserver.common.names.name" (dict "service" $service "kind" "app") | quote }}
                port:
                  number: {{ required (printf "HTTP port is missing for service '%s'" $service.name) $service.ports.http }}
    {{- end }}
    {{- end }}
    {{- end }}
    {{- if .Values.ingress.rootService }}
    {{- range $_, $service := .Values.services }}
    {{- if and (and $service.enabled $service.exposed) (eq $service.name $.Values.ingress.rootService) }}
    - host: {{ $.Values.ingress.domain | quote }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ include "homeserver.common.names.name" ( dict "service" $service "kind" "app" ) | quote }}
                port:
                  number: {{ required (printf "HTTP port is missing for service '%s'" $service.name) $service.ports.http }}
    {{- end }}
    {{- end }}
    {{- end }}
